snippet snips "all snippets"
/*
snips
beg
minimal
for
read
vect
all
readvec
sort
pb
graph
tree
rootedtree
0rootedtree
gcd
binpow
inv
fft
sufarr
aho
cht
segtree
centroid
sparse
decart
fenwick
fenwick2d
modular
table
{
dsu
deb
*/
endsnippet

snippet beg "template"
#include <bits/stdc++.h>
using namespace std;
using ll = long long;

int solve() {
	$0
	return 0;
}

int main() {
	ios::sync_with_stdio(0);
	cin.tie(0);
	int T;
	cin >> T;
	while(T--){
		solve();
	}
}
endsnippet

snippet minimal "minimalist begin"
#include <bits/stdc++.h>
using namespace std;
using ll = long long;

int main() {
	$0
}
endsnippet

snippet for "for"
for (int ${1:i} = 0; $1 < ${2:n}; $1++) {
	$0
}
endsnippet

snippet read "read first variable"
${1:int} ${2:n};
if (!(cin >> $2)) {
	return 1;
}
$0
endsnippet

snippet vect "vector"
vector<${1:int}> ${2:arr};$0
endsnippet

snippet all "all"
${1:arr}.begin(), $1.end()$0
endsnippet

snippet readvec "read vector"
vector<${1:int}> ${2:arr}(${3:n});
for ($1 &val : $2) {
	cin >> val;
}
$0
endsnippet

snippet sort "read vector"
sort(${1:arr}.begin(), $1.end());$0
endsnippet

snippet pb "push_back"
push_back($1);$0
endsnippet

snippet gcd "gcd"
template<typename T>
T gcd(T a, T b) {
	while (a) {
		b %= a;
		swap(a, b);
	}
	return b;
}
endsnippet

snippet binpow "binpow"
template<typename T>
T binpow(T a, T b) {
	T ans = 1;
	while (b) {
		if (b & 1) {
			ans = 1LL * ans * a % MOD;
		}
		a = 1LL * a * a % MOD;
		b >>= 1;
	}
	return ans;
}
endsnippet

snippet mmul "matrix multiplication"
//Performs matrix multiplication A*B
template <typename T>
vector<vector<T>> mmul(const vector<vector<T>>& A, const vector<vector<T>>& B){
	int m = A.size(), n = A[0].size(), p = B[0].size();

	vector<vector<T>> C(m, vector<int>(p, 0));
	for (int i = 0; i < n; i++){
		for (int k = 0; k < m; k++){
			for (int j = 0; j < p; j++){
				C[k][j] += A[k][i] * B[i][j];
			}
		}
	}
	return C;
}
endsnippet
