{
    "println": {
        "prefix": "pl",
        "body": ["println!(\"${1}\");"],
        "description": "println!(…);"
    },
    "vec": {
        "prefix": "v",
        "body": ["vec![${1}]"],
        "description": "vec![…]"
    },
    "writeln": {
        "prefix": "wl",
        "body": ["writeln!(${1}, \"${2}\")"],
        "description": "writeln!(…, …)"
    },
    "derive": {
        "prefix": "dr",
        "body": ["#[derive(${1})]"],
        "description": "#[derive(…)]"
    },
    "enum": {
        "prefix": "e",
        "body": [
            "#[derive(Debug)]",
            "enum ${1:Name} {",
            "    ${2:Variant1},",
            "    ${3:Variant2},",
            "}"
        ],
        "description": "enum … { … }"
    },
    "for": {
        "prefix": "f",
        "body": [
            "for ${1:pat} in ${2:expr} {",
            "    ${3:todo!();}",
            "}"
        ],
        "description": "for … in … { … }"
    },
    "if-let": {
        "prefix": "iflet",
        "body": [
            "if let ${1:Some(pat)} = ${2:expr} {",
            "    ${0:todo!();}",
            "}"
        ],
        "description": "if let … = … { … }"
    },
    "if": {
        "prefix": "if",
        "body": ["if ${1:condition} {", "    ${2:todo!();}", "}"],
        "description": "if … { … }"
    },
    "match": {
        "prefix": "ma",
        "body": [
            "match ${1:expr} {}"
        ],
        "description": "match … { … }"
    },
    "struct": {
        "prefix": "s",
        "body": [
            "#[derive(Debug)]",
            "struct ${1:Name} {",
            "    ${2:field}: ${3:Type}",
            "}"
        ],
        "description": "struct … { … }"
    },
    "test": {
        "prefix": "test",
        "body": [
            "#[test]",
            "fn ${1:name}() {",
            "    ${2:todo!();}",
            "}"
        ],
        "description": "#[test]"
    },
    "trait": {
        "prefix": "t",
        "body": ["trait ${1:Name} {", "    ${2:// add code here}", "}", ""],
        "description": "trait … { … }"
    },
    "type": {
        "prefix": "ty",
        "body": ["type ${1:Alias} = ${2:Type};"],
        "description": "type … = …;"
    },
    "while-let": {
        "prefix": "wlet",
        "body": [
            "while let ${1:Some(pat)} = ${2:expr} {",
            "    ${0:todo!();}",
            "}"
        ],
        "description": "while let … = … { … }"
    },
    "while": {
        "prefix": "wh",
        "body": ["while ${1:condition} {", "    ${2:todo!();}", "}"],
        "description": "while … { … }"
    }
}
